uniform sampler2D normalTex;
uniform sampler2D positionTex;
uniform vec4 lightColor;
uniform float shininess;
uniform vec3 lightPos;
uniform float lightRadius;
uniform float lightFalloff;

void main (void)
{
	vec2 texcoord = gl_TexCoord[0].xy;
	vec4 pos = texture2D(positionTex, texcoord);
	float materialValue = pos.w;
	vec3 vertex = pos.xyz;
	if (vertex.x < -9999.0 || materialValue > 0.9) {
		discard;
	}

	vec3 normal = texture2D(normalTex, texcoord).xyz;
	vec3 lightDir = lightPos - vertex;
	
	float distance = length(lightDir);
	float d = max(distance - lightRadius, 0.0);
	
	float denom = d / lightRadius + 1.0;
	float attenuation = 1.0 / (denom * denom);
	attenuation = max((attenuation - lightFalloff) / (1.0 - lightFalloff), 0.0);
	float diffuse = dot(lightDir / distance, normal);
	float specular = 0.0;
	if (diffuse > 0.0 && shininess > 0.0) {
		vec3 posEye = -vertex;
		vec3 viewEye = normalize(-posEye);
		vec3 halfVec = normalize(lightDir + viewEye);
		specular = pow(max(0.0, dot(normal, halfVec)), shininess);
	}
	gl_FragColor = (vec4(lightColor.xyz, 1.0) * (diffuse + specular) * attenuation) * lightColor.w;
}